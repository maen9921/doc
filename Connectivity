package com.company;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class Connectivity {
    private static Connection connection;

    private static final String DATABASE_NAME = "school";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "root";
    private static String url = "";
    private static ResultSet rs;
    private static Statement st;
    private static PreparedStatement ps;

    Connectivity() {
    }

    public static Connection getConnection() {
        if (connection == null) {
            connect();
        }
        return connection;
    }

    public static void setURL() {
        url = "jdbc:mysql://localhost:3306/" + DATABASE_NAME;
    }

    private static void connect() {
        try {
            setURL();
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(url, USERNAME, PASSWORD);
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    public static void close() {
        try {
            if (connection != null) {
                connection.close();
            }
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    public ArrayList filldata() {
        ArrayList<school> data = new ArrayList<>();
        try {
            System.out.println("in filldata");
            connect();
            String sql = "select * from class,students where class.ID = class_ID";
            st = connection.createStatement();
            ps = connection.prepareStatement(sql);
            rs = ps.executeQuery();
            System.out.println("after eq");
            while (rs.next()) {
                school s = new school();
                s.setAge(rs.getInt("age"));
                s.setClassId(rs.getInt("class.ID"));
                s.setClassID2(rs.getInt("students.class_ID"));
                s.setClassName(rs.getString("class.Name"));
                s.setGrades(rs.getInt("grades"));
                s.setNoOfStudent(rs.getInt("No_of_student"));
                s.setStudID(rs.getInt("students.ID"));
                s.setStudName(rs.getString("students.Name"));
                data.add(s);

            }
            for (Object i : data) {
                school school= (school) i;
                System.out.println(school +"\t");
            }
            System.out.println();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return data;
    }
     public List Max_grade() {
        ArrayList<school> data = filldata();
        List<school> stud_grades = null;
        //get grades
        Map<Integer, List<school>> grade = new LinkedHashMap<Integer, List<school>>();
        int grades;
        for (school sc : data) {
            grades = sc.getGrades();
            stud_grades = grade.get(grades);
            if (stud_grades == null) {
                stud_grades = new ArrayList<school>();
                grade.put(grades, stud_grades);

            }
            stud_grades.add(sc);
        }
        return stud_grades;
    }

    public void GetMaxGrade() {
        ArrayList<school> data = filldata();
        List<school> list_grade = Max_grade();
        //Collections.max(data,new school());
        Map<String, List<school>> items = new LinkedHashMap<String, List<school>>();
        String name;
        for (school s : data) {
            name = s.getClassName();
            List<school> names = items.get(name);
            if (names == null) {
                names = new ArrayList<school>();
                items.put(name, list_grade);

            }
            names.add(s);

        }
        for (Map.Entry<String, List<school>> entry : items.entrySet()) {
            System.out.println("Category " + entry.getKey() + ":");
            for (school item : entry.getValue()) {
                System.out.println("    Grade : " + item);
            }
        }

    }

    public void sort_grades_asc() {
        ArrayList<school> grades = (ArrayList<school>) Max_grade();
        Collections.sort(grades, new school());
        
         for (school s : grades) {
            System.out.print(s.getGrades() + "\t");
        }
        System.out.println();
    }

    public void sort_grades_desc() {
        ArrayList<school> grades = (ArrayList<school>) Max_grade();
        Collections.sort(grades,Collections.reverseOrder());
        
        System.out.println(grades+"\t");
    }
}


}
